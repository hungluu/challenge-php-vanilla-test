<?php
namespace app\common\base;

require_once __DIR__ . '/BaseModuleTestController.php';

use app\common\components\Request;
use app\common\components\Response;
use app\common\interfaces\ModuleInterface;
use Exception;

class BaseModule1 extends BaseModule implements ModuleInterface {
  public function getPath (string $sub_path = null) {
    return __DIR__ . '/' . $sub_path;
  }
  
  public function resolveController (string $controller_path) {
    if ($controller_path === 'TEST_ACTION') {
      return [
        'path' => __DIR__ . '/BaseModuleTestController.php',
        'className' => 'app\common\base\BaseModuleTestController'
      ];
    } else if ($controller_path === 'TEST_ACTION_FILE_NOT_FOUND') {
      return [
        'path' => 'not-found',
        'className' => 'app\common\base\BaseModuleTestController'
      ];
    } else if ($controller_path === 'TEST_ACTION_CLASS_NOT_FOUND') {
      return [
        'path' => __DIR__ . '/BaseModuleTestController.php',
        'className' => 'app\common\base\BaseModuleTestControllerNotFound'
      ];
    } else {
      return parent::resolveController($controller_path); // TODO: Change the autogenerated stub
    }
  }
}

class BaseModuleTest extends \Codeception\Test\Unit
{
  /**
   * @var \UnitRoboTester
   */
  protected $roboTester;

  /**
   * @var BaseModule1
   */
  protected $module;
  
  protected function _before () {
    $this->module = new BaseModule1();
  }

  public function testCanGetPath () {
    $this->assertEquals(__DIR__ . '/', $this->module->getPath());
  }

  public function testCanGetSubPath () {
    $this->assertEquals(__DIR__ . '/sub-path', $this->module->getPath('sub-path'));
  }

  public function testCanResolveController () {
    try {
      $this->assertEquals([
        'path' => __DIR__ . '/controllers/TestController.php',
        'className' => 'app\common\base\controllers\TestController'
      ], $this->module->resolveController('test'));

      $this->assertEquals([
        'path' => __DIR__ . '/controllers/test/MoreController.php',
        'className' => 'app\common\base\controllers\test\MoreController'
      ], $this->module->resolveController('test/more'));
    } catch (\Exception $ex) {
      exit;
    }
  }

  public function testCanResolveView () {
    $this->assertEquals([
      'path' => __DIR__ . '/views/test'
    ], $this->module->resolveView('test'));

    $this->assertEquals([
      'path' => __DIR__ . '/views/test/more.html'
    ], $this->module->resolveView('test/more.html'));
  }
  
  public function testCanRunAction () {
    $this->assertEquals('tested', $this->module->__invoke('TEST_ACTION/test', new Request(['headers' => []]), new Response()));
  }

  public function testShouldThrowExceptionWhenControllerNotFound () {
    $this->expectException(Exception::class);
    $this->module->__invoke('TEST_ACTION_FILE_NOT_FOUND/test', new Request(['headers' => []]), new Response());
  }

  public function testShouldThrowExceptionWhenControllerClassNotFound () {
    $this->expectException(Exception::class);
    $this->module->__invoke('TEST_ACTION_CLASS_NOT_FOUND/test', new Request(['headers' => []]), new Response());
  }

  public function testShouldThrowExceptionWhenActionNotFound () {
    $this->expectException(Exception::class);
    $this->module->__invoke('TEST_ACTION/testNotFound', new Request(['headers' => []]), new Response());
  }
}
